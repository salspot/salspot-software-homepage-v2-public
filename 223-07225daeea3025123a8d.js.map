{"version":3,"file":"223-07225daeea3025123a8d.js","mappings":"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","sources":["webpack://new-salspot-software/../src/components/intersection-observer.ts","webpack://new-salspot-software/../src/components/lazy-hydrate.tsx"],"sourcesContent":["let intersectionObserver: IntersectionObserver\n\nexport type Unobserver = () => void\n\nconst ioEntryMap = new WeakMap<HTMLElement, () => void>()\n/* eslint-disable @typescript-eslint/no-explicit-any  */\nconst connection =\n  (navigator as any).connection ||\n  (navigator as any).mozConnection ||\n  (navigator as any).webkitConnection\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\n// These match the thresholds used in Chrome's native lazy loading\n// @see https://web.dev/browser-level-image-lazy-loading/#distance-from-viewport-thresholds\nconst FAST_CONNECTION_THRESHOLD = `1250px`\nconst SLOW_CONNECTION_THRESHOLD = `2500px`\n\nexport function createIntersectionObserver(\n  callback: () => void\n): (element: HTMLElement) => Unobserver {\n  const connectionType = connection?.effectiveType\n\n  // if we don't support intersectionObserver we don't lazy load (Sorry IE 11).\n  if (!(`IntersectionObserver` in window)) {\n    return function observe(): Unobserver {\n      callback()\n      return function unobserve(): void {}\n    }\n  }\n\n  if (!intersectionObserver) {\n    intersectionObserver = new IntersectionObserver(\n      entries => {\n        entries.forEach(entry => {\n          if (entry.isIntersecting) {\n            // Get the matching entry's callback and call it\n            ioEntryMap.get(entry.target as HTMLElement)?.()\n            // We only need to call it once\n            ioEntryMap.delete(entry.target as HTMLElement)\n          }\n        })\n      },\n      {\n        rootMargin:\n          connectionType === `4g` && !connection?.saveData\n            ? FAST_CONNECTION_THRESHOLD\n            : SLOW_CONNECTION_THRESHOLD,\n      }\n    )\n  }\n\n  return function observe(element: HTMLElement): Unobserver {\n    // Store a reference to the callback mapped to the element being watched\n    ioEntryMap.set(element, callback)\n    intersectionObserver.observe(element)\n\n    return function unobserve(): void {\n      if (intersectionObserver && element) {\n        ioEntryMap.delete(element)\n        intersectionObserver.unobserve(element)\n      }\n    }\n  }\n}\n","import React from \"react\"\nimport { renderToStaticMarkup } from \"react-dom/server\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImage } from \"./main-image\"\nimport {\n  hasNativeLazyLoadSupport,\n  getMainProps,\n  getPlaceholderProps,\n} from \"./hooks\"\nimport { createIntersectionObserver } from \"./intersection-observer\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { GatsbyImageProps } from \"./gatsby-image.browser\"\n\ntype LazyHydrateProps = Omit<GatsbyImageProps, \"as\" | \"style\" | \"className\"> & {\n  isLoading: boolean\n  isLoaded: boolean\n}\n\nasync function applyPolyfill(element: HTMLImageElement): Promise<void> {\n  if (!(`objectFitPolyfill` in window)) {\n    await import(\n      // @ts-ignore typescript can't find the module for some reason ¯\\_(ツ)_/¯\n      /* webpackChunkName: \"gatsby-plugin-image-objectfit-polyfill\" */ `objectFitPolyfill`\n    )\n  }\n  ;(window as any).objectFitPolyfill(element)\n}\n\nfunction toggleLoaded(\n  mainImage: HTMLElement,\n  placeholderImage: HTMLElement\n): void {\n  mainImage.style.opacity = `1`\n\n  if (placeholderImage) {\n    placeholderImage.style.opacity = `0`\n  }\n}\n\nfunction startLoading(\n  element: HTMLElement,\n  cacheKey: string,\n  imageCache: Set<string>,\n  onStartLoad: GatsbyImageProps[\"onStartLoad\"],\n  onLoad: GatsbyImageProps[\"onLoad\"],\n  onError: GatsbyImageProps[\"onError\"]\n): () => void {\n  const mainImage = element.querySelector(\n    `[data-main-image]`\n  ) as HTMLImageElement\n  const placeholderImage = element.querySelector<HTMLElement>(\n    `[data-placeholder-image]`\n  )\n  const isCached = imageCache.has(cacheKey)\n\n  function onImageLoaded(e): void {\n    // eslint-disable-next-line @babel/no-invalid-this\n    this.removeEventListener(`load`, onImageLoaded)\n\n    const target = e.currentTarget\n    const img = new Image()\n    img.src = target.currentSrc\n\n    if (img.decode) {\n      // Decode the image through javascript to support our transition\n      img\n        .decode()\n        .then(() => {\n          // eslint-disable-next-line @babel/no-invalid-this\n          toggleLoaded(this, placeholderImage)\n          onLoad?.({\n            wasCached: isCached,\n          })\n        })\n        .catch(e => {\n          // eslint-disable-next-line @babel/no-invalid-this\n          toggleLoaded(this, placeholderImage)\n          onError?.(e)\n        })\n    } else {\n      // eslint-disable-next-line @babel/no-invalid-this\n      toggleLoaded(this, placeholderImage)\n      onLoad?.({\n        wasCached: isCached,\n      })\n    }\n  }\n\n  mainImage.addEventListener(`load`, onImageLoaded)\n\n  onStartLoad?.({\n    wasCached: isCached,\n  })\n  Array.from(mainImage.parentElement.children).forEach(child => {\n    const src = child.getAttribute(`data-src`)\n    const srcSet = child.getAttribute(`data-srcset`)\n    if (src) {\n      child.removeAttribute(`data-src`)\n      child.setAttribute(`src`, src)\n    }\n    if (srcSet) {\n      child.removeAttribute(`data-srcset`)\n      child.setAttribute(`srcset`, srcSet)\n    }\n  })\n\n  imageCache.add(cacheKey)\n\n  // Load times not always fires - mostly when it's a 304\n  // We check if the image is already completed and if so we trigger onload.\n  if (mainImage.complete) {\n    onImageLoaded.call(mainImage, {\n      currentTarget: mainImage,\n    })\n  }\n\n  return (): void => {\n    if (mainImage) {\n      mainImage.removeEventListener(`load`, onImageLoaded)\n    }\n  }\n}\n\nexport function swapPlaceholderImage(\n  element: HTMLElement,\n  cacheKey: string,\n  imageCache: Set<string>,\n  style: React.CSSProperties,\n  onStartLoad: GatsbyImageProps[\"onStartLoad\"],\n  onLoad: GatsbyImageProps[\"onLoad\"],\n  onError: GatsbyImageProps[\"onError\"]\n): () => void {\n  if (!hasNativeLazyLoadSupport()) {\n    let cleanup\n    const io = createIntersectionObserver(() => {\n      cleanup = startLoading(\n        element,\n        cacheKey,\n        imageCache,\n        onStartLoad,\n        onLoad,\n        onError\n      )\n    })\n    const unobserve = io(element)\n\n    // Polyfill \"object-fit\" if unsupported (mostly IE)\n    if (!(`objectFit` in document.documentElement.style)) {\n      element.dataset.objectFit = style.objectFit ?? `cover`\n      element.dataset.objectPosition = `${style.objectPosition ?? `50% 50%`}`\n      applyPolyfill(element as HTMLImageElement)\n    }\n\n    return (): void => {\n      if (cleanup) {\n        cleanup()\n      }\n\n      unobserve()\n    }\n  }\n\n  return startLoading(\n    element,\n    cacheKey,\n    imageCache,\n    onStartLoad,\n    onLoad,\n    onError\n  )\n}\n\nexport function renderImageToString({\n  image,\n  loading = `lazy`,\n  isLoading,\n  isLoaded,\n  imgClassName,\n  imgStyle = {},\n  objectPosition,\n  backgroundColor,\n  objectFit = `cover`,\n  ...props\n}: LazyHydrateProps): string {\n  const {\n    width,\n    height,\n    layout,\n    images,\n    placeholder,\n    backgroundColor: wrapperBackgroundColor,\n  } = image\n\n  imgStyle = {\n    objectFit,\n    objectPosition,\n    backgroundColor,\n    ...imgStyle,\n  }\n\n  return renderToStaticMarkup(\n    <LayoutWrapper layout={layout} width={width} height={height}>\n      <Placeholder\n        {...getPlaceholderProps(\n          placeholder,\n          isLoaded,\n          layout,\n          width,\n          height,\n          wrapperBackgroundColor,\n          objectFit,\n          objectPosition\n        )}\n      />\n\n      <MainImage\n        {...(props as Omit<\n          MainImageProps,\n          \"images\" | \"fallback\" | \"onLoad\" | \"onError\"\n        >)}\n        width={width}\n        height={height}\n        className={imgClassName}\n        {...getMainProps(isLoading, isLoaded, images, loading, imgStyle)}\n      />\n    </LayoutWrapper>\n  )\n}\n"],"names":["d","u","WeakMap","m","navigator","connection","mozConnection","webkitConnection","g","b","e","t","style","opacity","h","o","n","r","a","i","querySelector","c","s","has","l","removeEventListener","currentTarget","Image","src","currentSrc","decode","then","wasCached","catch","addEventListener","Array","from","parentElement","children","forEach","getAttribute","removeAttribute","setAttribute","add","complete","call","v","callback","window","IntersectionObserver","isIntersecting","get","target","delete","rootMargin","effectiveType","saveData","set","observe","unobserve","document","documentElement","dataset","objectFit","objectPosition","objectFitPolyfill","f","image","loading","isLoading","isLoaded","imgClassName","imgStyle","backgroundColor","p","y","w","width","j","height","C","layout","E","images","F","placeholder","P","L","createElement","className","renderImageToString","swapPlaceholderImage"],"sourceRoot":""}